// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/16/2016 14:49:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    hill_cipher
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hill_cipher_vlg_sample_tst(
	clk,
	encrypt,
	load_key,
	p1,
	p2,
	p3,
	sampler_tx
);
input  clk;
input  encrypt;
input  load_key;
input [3:0] p1;
input [3:0] p2;
input [3:0] p3;
output sampler_tx;

reg sample;
time current_time;
always @(clk or encrypt or load_key or p1 or p2 or p3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module hill_cipher_vlg_check_tst (
	c1,
	c2,
	c3,
	sampler_rx
);
input [3:0] c1;
input [3:0] c2;
input [3:0] c3;
input sampler_rx;

reg [3:0] c1_expected;
reg [3:0] c2_expected;
reg [3:0] c3_expected;

reg [3:0] c1_prev;
reg [3:0] c2_prev;
reg [3:0] c3_prev;

reg [3:0] c1_expected_prev;
reg [3:0] c2_expected_prev;
reg [3:0] c3_expected_prev;

reg [3:0] last_c1_exp;
reg [3:0] last_c2_exp;
reg [3:0] last_c3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	c1_prev = c1;
	c2_prev = c2;
	c3_prev = c3;
end

// update expected /o prevs

always @(trigger)
begin
	c1_expected_prev = c1_expected;
	c2_expected_prev = c2_expected;
	c3_expected_prev = c3_expected;
end


// expected c1[ 3 ]
initial
begin
	c1_expected[3] = 1'bX;
	c1_expected[3] = #999000 1'b0;
end 
// expected c1[ 2 ]
initial
begin
	c1_expected[2] = 1'bX;
	c1_expected[2] = #999000 1'b0;
end 
// expected c1[ 1 ]
initial
begin
	c1_expected[1] = 1'bX;
	c1_expected[1] = #999000 1'b0;
end 
// expected c1[ 0 ]
initial
begin
	c1_expected[0] = 1'bX;
	c1_expected[0] = #999000 1'b0;
end 
// expected c2[ 3 ]
initial
begin
	c2_expected[3] = 1'bX;
	c2_expected[3] = #999000 1'b0;
end 
// expected c2[ 2 ]
initial
begin
	c2_expected[2] = 1'bX;
	c2_expected[2] = #999000 1'b0;
end 
// expected c2[ 1 ]
initial
begin
	c2_expected[1] = 1'bX;
	c2_expected[1] = #999000 1'b0;
end 
// expected c2[ 0 ]
initial
begin
	c2_expected[0] = 1'bX;
	c2_expected[0] = #999000 1'b0;
end 
// expected c3[ 3 ]
initial
begin
	c3_expected[3] = 1'bX;
	c3_expected[3] = #999000 1'b0;
end 
// expected c3[ 2 ]
initial
begin
	c3_expected[2] = 1'bX;
	c3_expected[2] = #999000 1'b0;
end 
// expected c3[ 1 ]
initial
begin
	c3_expected[1] = 1'bX;
	c3_expected[1] = #999000 1'b0;
end 
// expected c3[ 0 ]
initial
begin
	c3_expected[0] = 1'bX;
	c3_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(c1_expected or c1 or c2_expected or c2 or c3_expected or c3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c1 = %b | expected c2 = %b | expected c3 = %b | ",c1_expected_prev,c2_expected_prev,c3_expected_prev);
	$display("| real c1 = %b | real c2 = %b | real c3 = %b | ",c1_prev,c2_prev,c3_prev);
`endif
	if (
		( c1_expected_prev[0] !== 1'bx ) && ( c1_prev[0] !== c1_expected_prev[0] )
		&& ((c1_expected_prev[0] !== last_c1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c1_expected_prev);
		$display ("     Real value = %b", c1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c1_exp[0] = c1_expected_prev[0];
	end
	if (
		( c1_expected_prev[1] !== 1'bx ) && ( c1_prev[1] !== c1_expected_prev[1] )
		&& ((c1_expected_prev[1] !== last_c1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c1_expected_prev);
		$display ("     Real value = %b", c1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c1_exp[1] = c1_expected_prev[1];
	end
	if (
		( c1_expected_prev[2] !== 1'bx ) && ( c1_prev[2] !== c1_expected_prev[2] )
		&& ((c1_expected_prev[2] !== last_c1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c1_expected_prev);
		$display ("     Real value = %b", c1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c1_exp[2] = c1_expected_prev[2];
	end
	if (
		( c1_expected_prev[3] !== 1'bx ) && ( c1_prev[3] !== c1_expected_prev[3] )
		&& ((c1_expected_prev[3] !== last_c1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c1_expected_prev);
		$display ("     Real value = %b", c1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c1_exp[3] = c1_expected_prev[3];
	end
	if (
		( c2_expected_prev[0] !== 1'bx ) && ( c2_prev[0] !== c2_expected_prev[0] )
		&& ((c2_expected_prev[0] !== last_c2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c2_expected_prev);
		$display ("     Real value = %b", c2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_c2_exp[0] = c2_expected_prev[0];
	end
	if (
		( c2_expected_prev[1] !== 1'bx ) && ( c2_prev[1] !== c2_expected_prev[1] )
		&& ((c2_expected_prev[1] !== last_c2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c2_expected_prev);
		$display ("     Real value = %b", c2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_c2_exp[1] = c2_expected_prev[1];
	end
	if (
		( c2_expected_prev[2] !== 1'bx ) && ( c2_prev[2] !== c2_expected_prev[2] )
		&& ((c2_expected_prev[2] !== last_c2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c2_expected_prev);
		$display ("     Real value = %b", c2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_c2_exp[2] = c2_expected_prev[2];
	end
	if (
		( c2_expected_prev[3] !== 1'bx ) && ( c2_prev[3] !== c2_expected_prev[3] )
		&& ((c2_expected_prev[3] !== last_c2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c2_expected_prev);
		$display ("     Real value = %b", c2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_c2_exp[3] = c2_expected_prev[3];
	end
	if (
		( c3_expected_prev[0] !== 1'bx ) && ( c3_prev[0] !== c3_expected_prev[0] )
		&& ((c3_expected_prev[0] !== last_c3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c3_expected_prev);
		$display ("     Real value = %b", c3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c3_exp[0] = c3_expected_prev[0];
	end
	if (
		( c3_expected_prev[1] !== 1'bx ) && ( c3_prev[1] !== c3_expected_prev[1] )
		&& ((c3_expected_prev[1] !== last_c3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c3_expected_prev);
		$display ("     Real value = %b", c3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c3_exp[1] = c3_expected_prev[1];
	end
	if (
		( c3_expected_prev[2] !== 1'bx ) && ( c3_prev[2] !== c3_expected_prev[2] )
		&& ((c3_expected_prev[2] !== last_c3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c3_expected_prev);
		$display ("     Real value = %b", c3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c3_exp[2] = c3_expected_prev[2];
	end
	if (
		( c3_expected_prev[3] !== 1'bx ) && ( c3_prev[3] !== c3_expected_prev[3] )
		&& ((c3_expected_prev[3] !== last_c3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c3_expected_prev);
		$display ("     Real value = %b", c3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c3_exp[3] = c3_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module hill_cipher_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg encrypt;
reg load_key;
reg [3:0] p1;
reg [3:0] p2;
reg [3:0] p3;
// wires                                               
wire [3:0] c1;
wire [3:0] c2;
wire [3:0] c3;

wire sampler;                             

// assign statements (if any)                          
hill_cipher i1 (
// port map - connection between master ports and signals/registers   
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.clk(clk),
	.encrypt(encrypt),
	.load_key(load_key),
	.p1(p1),
	.p2(p2),
	.p3(p3)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// load_key
initial
begin
	load_key = 1'b0;
	load_key = #500000 1'b1;
	load_key = #300000 1'b0;
	load_key = #1640000 1'b1;
	load_key = #20000 1'b0;
	load_key = #80000 1'b1;
	load_key = #20000 1'b0;
	load_key = #80000 1'b1;
	load_key = #20000 1'b0;
end 

// encrypt
initial
begin
	encrypt = 1'b0;
	encrypt = #1800000 1'b1;
	encrypt = #300000 1'b0;
	encrypt = #1640000 1'b1;
	encrypt = #20000 1'b0;
	encrypt = #80000 1'b1;
	encrypt = #20000 1'b0;
	encrypt = #80000 1'b1;
	encrypt = #20000 1'b0;
	encrypt = #100000 1'b1;
	encrypt = #80000 1'b0;
	encrypt = #20000 1'b1;
	encrypt = #80000 1'b0;
	encrypt = #20000 1'b1;
end 
// p1[ 3 ]
initial
begin
	p1[3] = 1'b0;
	p1[3] = #600000 1'b1;
	p1[3] = #100000 1'b0;
	p1[3] = #1100000 1'b1;
	p1[3] = #100000 1'b0;
	p1[3] = #100000 1'b1;
	p1[3] = #100000 1'b0;
	p1[3] = #100000 1'b1;
	p1[3] = #100000 1'b0;
	p1[3] = #140000 1'b1;
	p1[3] = #20000 1'b0;
	p1[3] = #80000 1'b1;
	p1[3] = #20000 1'b0;
	p1[3] = #1280000 1'b1;
	p1[3] = #20000 1'b0;
end 
// p1[ 2 ]
initial
begin
	p1[2] = 1'b0;
	p1[2] = #700000 1'b1;
	p1[2] = #100000 1'b0;
	p1[2] = #1100000 1'b1;
	p1[2] = #100000 1'b0;
	p1[2] = #100000 1'b1;
	p1[2] = #100000 1'b0;
	p1[2] = #100000 1'b1;
	p1[2] = #100000 1'b0;
	p1[2] = #40000 1'b1;
	p1[2] = #20000 1'b0;
	p1[2] = #80000 1'b1;
	p1[2] = #20000 1'b0;
	p1[2] = #80000 1'b1;
	p1[2] = #20000 1'b0;
	p1[2] = #1180000 1'b1;
	p1[2] = #20000 1'b0;
	p1[2] = #380000 1'b1;
	p1[2] = #20000 1'b0;
end 
// p1[ 1 ]
initial
begin
	p1[1] = 1'b0;
	p1[1] = #500000 1'b1;
	p1[1] = #300000 1'b0;
	p1[1] = #1000000 1'b1;
	p1[1] = #100000 1'b0;
	p1[1] = #300000 1'b1;
	p1[1] = #100000 1'b0;
	p1[1] = #340000 1'b1;
	p1[1] = #20000 1'b0;
	p1[1] = #1080000 1'b1;
	p1[1] = #20000 1'b0;
	p1[1] = #80000 1'b1;
	p1[1] = #20000 1'b0;
	p1[1] = #80000 1'b1;
	p1[1] = #20000 1'b0;
	p1[1] = #80000 1'b1;
	p1[1] = #20000 1'b0;
	p1[1] = #80000 1'b1;
	p1[1] = #20000 1'b0;
end 
// p1[ 0 ]
initial
begin
	p1[0] = 1'b0;
	p1[0] = #700000 1'b1;
	p1[0] = #100000 1'b0;
	p1[0] = #1100000 1'b1;
	p1[0] = #100000 1'b0;
	p1[0] = #200000 1'b1;
	p1[0] = #100000 1'b0;
	p1[0] = #240000 1'b1;
	p1[0] = #20000 1'b0;
	p1[0] = #1480000 1'b1;
	p1[0] = #20000 1'b0;
	p1[0] = #180000 1'b1;
	p1[0] = #20000 1'b0;
end 
// p2[ 3 ]
initial
begin
	p2[3] = 1'b0;
	p2[3] = #500000 1'b1;
	p2[3] = #200000 1'b0;
	p2[3] = #1200000 1'b1;
	p2[3] = #200000 1'b0;
	p2[3] = #100000 1'b1;
	p2[3] = #200000 1'b0;
	p2[3] = #240000 1'b1;
	p2[3] = #20000 1'b0;
	p2[3] = #1180000 1'b1;
	p2[3] = #20000 1'b0;
	p2[3] = #180000 1'b1;
	p2[3] = #20000 1'b0;
	p2[3] = #80000 1'b1;
	p2[3] = #20000 1'b0;
	p2[3] = #80000 1'b1;
	p2[3] = #20000 1'b0;
end 
// p2[ 2 ]
initial
begin
	p2[2] = 1'b0;
	p2[2] = #600000 1'b1;
	p2[2] = #100000 1'b0;
	p2[2] = #1100000 1'b1;
	p2[2] = #300000 1'b0;
	p2[2] = #100000 1'b1;
	p2[2] = #200000 1'b0;
	p2[2] = #40000 1'b1;
	p2[2] = #20000 1'b0;
	p2[2] = #180000 1'b1;
	p2[2] = #20000 1'b0;
	p2[2] = #1080000 1'b1;
	p2[2] = #20000 1'b0;
	p2[2] = #80000 1'b1;
	p2[2] = #20000 1'b0;
	p2[2] = #180000 1'b1;
	p2[2] = #20000 1'b0;
end 
// p2[ 1 ]
initial
begin
	p2[1] = 1'b0;
	p2[1] = #700000 1'b1;
	p2[1] = #100000 1'b0;
	p2[1] = #1000000 1'b1;
	p2[1] = #100000 1'b0;
	p2[1] = #200000 1'b1;
	p2[1] = #100000 1'b0;
	p2[1] = #340000 1'b1;
	p2[1] = #20000 1'b0;
	p2[1] = #80000 1'b1;
	p2[1] = #20000 1'b0;
	p2[1] = #1080000 1'b1;
	p2[1] = #20000 1'b0;
	p2[1] = #180000 1'b1;
	p2[1] = #20000 1'b0;
	p2[1] = #80000 1'b1;
	p2[1] = #20000 1'b0;
end 
// p2[ 0 ]
initial
begin
	p2[0] = 1'b0;
	p2[0] = #500000 1'b1;
	p2[0] = #100000 1'b0;
	p2[0] = #100000 1'b1;
	p2[0] = #100000 1'b0;
	p2[0] = #1200000 1'b1;
	p2[0] = #100000 1'b0;
	p2[0] = #100000 1'b1;
	p2[0] = #200000 1'b0;
	p2[0] = #240000 1'b1;
	p2[0] = #20000 1'b0;
	p2[0] = #1080000 1'b1;
	p2[0] = #20000 1'b0;
	p2[0] = #180000 1'b1;
	p2[0] = #20000 1'b0;
	p2[0] = #80000 1'b1;
	p2[0] = #20000 1'b0;
	p2[0] = #180000 1'b1;
	p2[0] = #20000 1'b0;
end 
// p3[ 3 ]
initial
begin
	p3[3] = 1'b0;
	p3[3] = #600000 1'b1;
	p3[3] = #100000 1'b0;
	p3[3] = #1400000 1'b1;
	p3[3] = #300000 1'b0;
	p3[3] = #140000 1'b1;
	p3[3] = #20000 1'b0;
	p3[3] = #1180000 1'b1;
	p3[3] = #20000 1'b0;
	p3[3] = #80000 1'b1;
	p3[3] = #20000 1'b0;
	p3[3] = #380000 1'b1;
	p3[3] = #20000 1'b0;
end 
// p3[ 2 ]
initial
begin
	p3[2] = 1'b0;
	p3[2] = #500000 1'b1;
	p3[2] = #100000 1'b0;
	p3[2] = #1500000 1'b1;
	p3[2] = #100000 1'b0;
	p3[2] = #1540000 1'b1;
	p3[2] = #20000 1'b0;
	p3[2] = #280000 1'b1;
	p3[2] = #20000 1'b0;
end 
// p3[ 1 ]
initial
begin
	p3[1] = 1'b0;
	p3[1] = #600000 1'b1;
	p3[1] = #200000 1'b0;
	p3[1] = #1000000 1'b1;
	p3[1] = #100000 1'b0;
	p3[1] = #100000 1'b1;
	p3[1] = #300000 1'b0;
	p3[1] = #1440000 1'b1;
	p3[1] = #20000 1'b0;
	p3[1] = #80000 1'b1;
	p3[1] = #20000 1'b0;
	p3[1] = #280000 1'b1;
	p3[1] = #20000 1'b0;
	p3[1] = #80000 1'b1;
	p3[1] = #20000 1'b0;
end 
// p3[ 0 ]
initial
begin
	p3[0] = 1'b0;
	p3[0] = #500000 1'b1;
	p3[0] = #300000 1'b0;
	p3[0] = #1100000 1'b1;
	p3[0] = #200000 1'b0;
	p3[0] = #340000 1'b1;
	p3[0] = #20000 1'b0;
	p3[0] = #80000 1'b1;
	p3[0] = #20000 1'b0;
	p3[0] = #80000 1'b1;
	p3[0] = #20000 1'b0;
	p3[0] = #1080000 1'b1;
	p3[0] = #20000 1'b0;
	p3[0] = #180000 1'b1;
	p3[0] = #20000 1'b0;
end 

hill_cipher_vlg_sample_tst tb_sample (
	.clk(clk),
	.encrypt(encrypt),
	.load_key(load_key),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.sampler_tx(sampler)
);

hill_cipher_vlg_check_tst tb_out(
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.sampler_rx(sampler)
);
endmodule

